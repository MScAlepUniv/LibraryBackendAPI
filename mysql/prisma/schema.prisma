generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model author_publication {
  author_id           Int
  publication_id      Int
  rate_of_associating Int
  authors             authors      @relation(fields: [author_id], references: [id])
  publications        publications @relation(fields: [publication_id], references: [id])

  @@id([author_id, publication_id])
  @@index([author_id], name: "Author_id")
  @@index([publication_id], name: "Published_id")
}

model authors {
  id                 Int                  @id @default(autoincrement()) @map("_id")
  name               String               @db.VarChar(50)
  last_name          String               @db.VarChar(50)
  birthday           DateTime?            @db.Date
  place_of_birth     String?              @db.VarChar(50)
  address            String?              @db.VarChar(100)
  date_of_death      DateTime?            @db.Date
  biography          String?              @db.VarChar(300)
  author_publication author_publication[]
}

model availabilities {
  id                  Int                   @id @default(autoincrement()) @map("_id")
  availability_type   String                @db.VarChar(50)
  ownership_transfers ownership_transfers[]
}

model classes {
  id              Int               @id @default(autoincrement()) @map("_id")
  class_name      String            @db.VarChar(50)
  discount_offers discount_offers[]
  publications    publications[]
}

model copies {
  copy_id             Int                   @id @default(autoincrement())
  publication_id      Int
  state_id            Int
  current_situation   String                @db.VarChar(50)
  publications        publications          @relation(fields: [publication_id], references: [id])
  states              states                @relation(fields: [state_id], references: [id])
  borrows             borrows[]
  ownership_transfers ownership_transfers[]

  @@index([publication_id], name: "Published_id")
  @@index([state_id], name: "State_id")
}

model employees {
  id                             Int        @id @default(autoincrement()) @map("_id")
  name                           String     @db.VarChar(50)
  father_name                    String     @db.VarChar(50)
  last_name                      String     @db.VarChar(50)
  birthday                       DateTime   @db.Date
  address                        String     @db.VarChar(100)
  qualification                  String     @db.VarChar(100)
  job                            String     @db.VarChar(50)
  date_of_start                  DateTime   @db.Date
  date_of_end                    DateTime   @db.Date
  sale_permission                Boolean    @db.Bit(1)
  borrowing_permission           Boolean?   @db.Bit(1)
  permission_granted_permissions Boolean    @db.Bit(1)
  user_name                      String     @db.VarChar(50)
  pass                           String     @db.VarChar(20)
  is_admin                       Boolean    @default(dbgenerated("b'0'")) @db.Bit(1)
  borrows                        borrows[]
  requests                       requests[]
}

model invoices {
  id                  Int                   @id @default(autoincrement()) @map("_id")
  price               Float
  customer_account_id Int
  total_discount      Float
  final_price         Float
  customer_accounts   customer_accounts     @relation(fields: [customer_account_id], references: [Id])
  ownership_transfers ownership_transfers[]
  refunds             refunds[]

  @@index([customer_account_id], name: "CustomerAccount_Id")
}

model publications {
  id                  Int                  @id @default(autoincrement()) @map("_id")
  ISBN                Int?
  title               String               @db.VarChar(50)
  date_of_publishing  DateTime?            @db.Date
  publisher_id        Int?
  class_id            Int?
  keywords            String?              @db.VarChar(100)
  num_of_pages        Int?
  subject_id          Int?
  pirchase_price_copy Int?
  for_sale            Bytes?               @db.Bit(5)
  sale_price_copy     Int?
  classes             classes?             @relation(fields: [class_id], references: [id])
  publishers          publishers?          @relation(fields: [publisher_id], references: [id])
  subjects            subjects?            @relation(fields: [subject_id], references: [id])
  author_publication  author_publication[]
  copies              copies[]
  discount_offers     discount_offers[]

  @@index([class_id], name: "Class_id")
  @@index([publisher_id], name: "publisher_id")
  @@index([subject_id], name: "subject_id")
}

model publishers {
  id           Int            @id @default(autoincrement()) @map("_id")
  name         String         @db.VarChar(50)
  address      String         @db.VarChar(100)
  specialty    String         @db.VarChar(50)
  publications publications[]
}

model refunds {
  id                                                               Int                   @id @default(autoincrement()) @map("_id")
  price                                                            Float
  old_transfer_id                                                  Int
  invoice_id                                                       Int
  invoices                                                         invoices              @relation(fields: [invoice_id], references: [id])
  ownership_transfers_ownership_transfersTorefunds_old_transfer_id ownership_transfers   @relation("ownership_transfersTorefunds_old_transfer_id", fields: [old_transfer_id], references: [id])
  ownership_transfers_ownership_transfers_refund_idTorefunds       ownership_transfers[] @relation("ownership_transfers_refund_idTorefunds")

  @@index([invoice_id], name: "Invoice_Id")
  @@index([old_transfer_id], name: "OldTransfer_Id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model requests {
  id                   Int       @id @default(autoincrement()) @map("_id")
  employee_id          Int
  publication_name     String    @db.VarChar(100)
  not_available_reason String    @db.VarChar(100)
  date                 DateTime  @db.Date
  employees            employees @relation(fields: [employee_id], references: [id])

  @@index([employee_id], name: "Employee_Id")
  @@ignore
}

model states {
  id         Int      @id @default(autoincrement()) @map("_id")
  state_type String   @db.VarChar(50)
  copies     copies[]
}

model subjects {
  id                  Int            @id @default(autoincrement()) @map("_id")
  subject_description String         @db.VarChar(100)
  publications        publications[]
}

model subscriptioncards {
  id              Int        @id @default(autoincrement()) @map("_id")
  subscription_id Int
  state           String     @db.VarChar(50)
  visitors        visitors[]
}

model borrows {
  id                 Int       @id @default(autoincrement()) @map("_id")
  visitor_id         Int
  employee_id        Int
  copy_id            Int
  date_borrow        DateTime  @db.Date
  type_borrow        String    @db.VarChar(50)
  date_return        DateTime  @db.Date
  date_actual_return DateTime  @db.Date
  copies             copies    @relation(fields: [copy_id], references: [copy_id])
  employees          employees @relation(fields: [employee_id], references: [id])

  @@index([copy_id], name: "Copy_id")
  @@index([employee_id], name: "Employee_id")
}

model customer_accounts {
  Id              Int        @id @default(autoincrement()) @map("_Id")
  bank_name       String     @db.VarChar(50)
  address         String     @db.VarChar(100)
  bank_account_no String     @db.VarChar(100)
  visitor_id      Int
  visitors        visitors   @relation(fields: [visitor_id], references: [id])
  invoices        invoices[]

  @@index([visitor_id], name: "visitor_Id")
}

model ownership_transfers {
  id                                                   Int            @id @default(autoincrement()) @map("_id")
  copy_id                                              Int
  data                                                 DateTime       @db.Date
  availability_type_id                                 Int
  beneficiary                                          String?        @db.VarChar(50)
  transfer_type                                        String         @db.VarChar(50)
  invoice_id                                           Int
  refund_id                                            Int
  availabilities                                       availabilities @relation(fields: [availability_type_id], references: [id])
  copies                                               copies         @relation(fields: [copy_id], references: [copy_id])
  invoices                                             invoices       @relation(fields: [invoice_id], references: [id])
  refunds_ownership_transfers_refund_idTorefunds       refunds        @relation("ownership_transfers_refund_idTorefunds", fields: [refund_id], references: [id])
  refunds_ownership_transfersTorefunds_old_transfer_id refunds[]      @relation("ownership_transfersTorefunds_old_transfer_id")

  @@index([availability_type_id], name: "Availability_id")
  @@index([invoice_id], name: "Invoice_id")
  @@index([refund_id], name: "Refund_Id")
  @@index([transfer_type], name: "TransferType_Id")
  @@index([copy_id], name: "copy_id")
}

model visitors {
  id                Int                 @id @default(autoincrement()) @map("_id")
  name              String              @db.VarChar(50)
  father_name       String              @db.VarChar(50)
  last_name         String              @db.VarChar(50)
  birthday          DateTime            @db.Date
  visitor_card_id   Int
  address           String              @db.VarChar(100)
  job               String              @db.VarChar(50)
  subscription_date DateTime            @db.Date
  qualification     String              @db.VarChar(100)
  user_name         String?             @db.VarChar(50)
  pass              String?             @db.VarChar(20)
  subscriptioncards subscriptioncards   @relation(fields: [visitor_card_id], references: [id])
  customer_accounts customer_accounts[]

  @@index([visitor_card_id], name: "visitor_card_id")
}

model discount_offers {
  id               Int          @id @default(autoincrement()) @map("_id")
  rate_of_discount Int
  quantity         Int
  class_id         Int
  publication_id   Int
  classes          classes      @relation(fields: [class_id], references: [id])
  publications     publications @relation(fields: [publication_id], references: [id])

  @@index([publication_id], name: "Publisher_id")
  @@index([class_id], name: "class_id")
}
